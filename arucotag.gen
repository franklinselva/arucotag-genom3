/*/
 * Copyright (c) 2020 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                                  Martin Jacquet - June 2020
 */
/* ---- Includes ---------------------------------------------------------- */
#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/pose/pose_estimator.gen"
#include "or/sensor/camera.gen"

/* ---- Component declaration --------------------------------------------- */
component arucotag {
    version         "1.0";
    email           "martin.jacquet@laas.fr";
    lang			"c";
    require         "genom3 >= 2.99.26";
    codels-require  "opencv";

    /* ---- Interfaces ---------------------------------------------------- */
    uses    or_camera;

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_mem { string<128> what; };
    exception e_sys { short code; string<128> what; };

    /* ---- Types --------------------------------------------------------- */
    native calib;
    native detector;
    native predictor;

    native log_s;

    typedef string<128> portinfo;

    /* ---- Ports --------------------------------------------------------- */
    port multiple out or_pose_estimator::state pose;
    port in or_pose_estimator::state drone;
    /* interfaces ports:
     *  port in   or::sensor::frame         frame;
     *  port in   or::sensor::intrinsics    intrinsics;
     *  port in   or::sensor::extrinsics    extrinsics;
     */

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        float length;
        calib calib;
        detector tags;
        predictor pred;

        sequence<portinfo> ports;

        log_s log;
    };

    const unsigned short detect_period = 50;
    const unsigned short predict_period = 5;

    /* ---- Main task ----------------------------------------------------- */
    task detect {
        period detect_period ms;

        codel<start> detect_start(out ::ids)
            yield wait;

        codel<wait> detect_wait(in length, in intrinsics, in frame, out calib)
            yield pause::wait, main;

        codel<main> detect_main(in frame, in length, in calib, out tags, in ports)
            yield pause::main, valid;

        codel<valid> detect_valid(in tags, out pred)
            yield log;

        codel<log> detect_log(in tags, inout log)
            yield pause::main;
    };

    task predict {
        period predict_period ms;

        codel<start> predict_start()
            yield wait;

        codel<wait> predict_wait(in extrinsics, out pred)
            yield pause::wait, main;

        codel<main> predict_main(inout pred, in drone, out pose)
            yield pause::main, log;

        codel<log> predict_log(in pred, inout log)
            yield pause::main;
    };

    activity add_marker(in string<128> marker = : "Marker name") {
        task detect;
        codel<start> add_marker(in marker, out pred, out ports, out pose)
            yield ether;
    };

    /* ---- Getters/Setters ----------------------------------------------- */
    attribute set_length(in length = : "Length of tags");

    /* ---- Logging ------------------------------------------------------- */
    function log(in string<64> path = "/tmp/arucotag.log": "Log file name",
                 in unsigned long decimation = 1: "Reduced logging frequency") {
        throw e_sys;
        codel log_start(in path, in decimation, inout log);
    };

    function log_stop() {
        codel log_stop(out log);
    };

    function log_info(out unsigned long miss = : "Missed log entries",
                      out unsigned long total = : "Total log entries") {
        codel log_info(in log, out miss, out total);
    };

};
